#!/bin/bash

source "$(dirname ${BASH_SOURCE[0]:-${(%):-%x}})/shared.sh"


## Autocomplete - gci

_gci-running() {
  local word="$2"
  COMPREPLY=($(compgen -W "$(gci --format="value(name)" --filter="RUNNING")" -- "${word}"))
  return 0
}

_gci-start() {
  local word="$2"
  COMPREPLY=($(compgen -W "$(gci --format="value(name)" --filter="TERMINATED")" -- "${word}"))
  return 0
}

_gci-del() {
  local word="$2"
  COMPREPLY=($(compgen -W "$(gci --format="value(name)")" -- "${word}"))
  return 0
  }


## instances list
gci() {
  # TODO: Filters are broken and will only match first item in a "" quoted list
  gformat="[box]"
  ## Cheap trick - drop pretty formatting when piping output
  [[  -p /dev/stdout ]] && gformat=""
  if [[ "${@}" == *"--"* ]]; then
    gcloud compute instances list --format="${gformat}" "${@}"
  elif [ ! -z "${@}" ]; then
    gcloud compute instances list --format="${gformat}" --filter="NAME~${@}"
  else
    gcloud compute instances list --format="${gformat}"
  fi
}

## Get state of instances
gci-status() {
  #TODO: Issue with filter parsing. needs xxx OR xxx see "gcloud topic filters"
  local inputs="$(_bmg_readinputs "$@")"
  [[ -z "$inputs" ]] && _bmg_usage "<instance-name>" && return 1
  gci --filter "${inputs}" --format="table[no-heading](name,status)"
}

gci-start() {
  local inputs="$(_bmg_readinputs "$@")"
  [[ -z "$inputs" ]] && _bmg_usage "<instance-name> [--zone=<zone>]" && return 1
  ZONE=$(gci-zone "$1")
  gcloud compute instances start --zone "$ZONE" "$1"
}

gci-stop() {
  local inputs="$(_bmg_readinputs "$@")"
  [[ -z "$inputs" ]] && _bmg_usage "<instance-name> [--zone=<zone>]" && return 1
  ZONE=$(gci-zone "$1")
  gcloud compute instances stop --zone "$ZONE" "$1"
}

gci-del() {
  local inputs="$(_bmg_readinputs "$@")"
  [[ -z "$inputs" ]] && _bmg_usage "<instance-name> [--zone=<zone>]" && return 1
  ZONE=$(gci-zone "$1")
  gcloud compute instances delete --zone "$ZONE" "$1"
}

gci-reset() {
  local inputs="$(_bmg_readinputs "$@")"
  [[ -z "$inputs" ]] && _bmg_usage "<instance-name> [--zone=<zone>]" && return 1
  ZONE=$(gci-zone "$1")
  gcloud compute instances reset --zone "$ZONE" "$1"
}

gci-zone() {
  local inputs="$(_bmg_readinputs "$@")"
  [[ -z "$inputs" ]] && _bmg_usage "<instance-name> [--zone=<zone>]" && return 1
  gcloud compute instances list --format='value(ZONE)' --filter="NAME=$1"
}

gci-ips() {
  local inputs="$(_bmg_readinputs "$@")"
  [[ -z "$inputs" ]] && _bmg_usage "<instance-name>" && return 1
  gcloud compute instances list --format='value(NAME,INTERNAL_IP,EXTERNAL_IP)' --filter="NAME~$1"
}

gci-iip() {
  local inputs="$(_bmg_readinputs "$@")"
  [[ -z "$inputs" ]] && _bmg_usage "<instance-name>" && return 1
  gcloud compute instances list --format='value(NAME,INTERNAL_IP)' --filter="NAME~$1"
}

gci-eip() {
  local inputs="$(_bmg_readinputs "$@")"
  [[ -z "$inputs" ]] && _bmg_usage "<instance-name>" && return 1
  gcloud compute instances list --format='value(NAME,EXTERNAL_IP)' --filter="NAME~$1"
}

gci-serial() {
  local inputs="$(_bmg_readinputs "$@")"
  [[ -z "$inputs" ]] && _bmg_usage "<instance name>" && return 1
  ZONE=$(gci-zone "$1")
      gcloud compute instances get-serial-port-output ${1} --zone=${ZONE}
}

gci-serial-tail() {
  local inputs="$(_bmg_readinputs "$@")"
  [[ -z "$inputs" ]] && _bmg_usage "<instance name>" && return 1
  ZONE=$(gci-zone "$1")
      gcloud compute instances tail-serial-port-output ${1} --zone=${ZONE}
  }

